// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MikoMe.Data;

#nullable disable

namespace MikoMe.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250831043316_AddFsrsToCard")]
    partial class AddFsrsToCard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("MikoMe.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DueAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("Ease")
                        .HasColumnType("REAL");

                    b.Property<double?>("FsrsDifficulty")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("FsrsDueUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FsrsIsNew")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FsrsLapses")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FsrsLastReviewUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("FsrsReps")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("FsrsStability")
                        .HasColumnType("REAL");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Lapses")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastReviewedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FsrsDueUtc");

                    b.HasIndex("WordId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MikoMe.Models.ReviewLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ElapsedDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<double>("NextEase")
                        .HasColumnType("REAL");

                    b.Property<int>("NextInterval")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PrevEase")
                        .HasColumnType("REAL");

                    b.Property<int>("PrevInterval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReviewedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ReviewLogs");
                });

            modelBuilder.Entity("MikoMe.Models.SentenceWordLink", b =>
                {
                    b.Property<int>("SentenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("SentenceId", "WordId");

                    b.HasIndex("WordId");

                    b.ToTable("SentenceWordLinks");
                });

            modelBuilder.Entity("MikoMe.Models.SplitWord", b =>
                {
                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hanzi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("MikoMe.Models.TokenItem", b =>
                {
                    b.Property<string>("Hanzi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("MikoMe.Models.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hanzi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pinyin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("MikoMe.Models.Card", b =>
                {
                    b.HasOne("MikoMe.Models.Word", "Word")
                        .WithMany("Cards")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("MikoMe.Models.SentenceWordLink", b =>
                {
                    b.HasOne("MikoMe.Models.Word", "Sentence")
                        .WithMany("AsSentenceLinks")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MikoMe.Models.Word", "Word")
                        .WithMany("AsWordLinks")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentence");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("MikoMe.Models.Word", b =>
                {
                    b.Navigation("AsSentenceLinks");

                    b.Navigation("AsWordLinks");

                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
